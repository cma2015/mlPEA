<tool id="Trinity_Assembly" name="Trinity Assembly">
  <description></description>
  <command><![CDATA[
	mkdir -p ${__tool_directory__}/$$/ &&
	source /home/galaxy/miniconda3/bin/activate /home/galaxy/miniconda3/envs/trinity &&
	#if $paired.is_paired == "paired":
		#set $PE_R1 = list()
        #set $PE_R2 = list()
        #for $fileone in $paired.PE_fastqFiles:
            ln -sf $fileone.PE_FASTQ_R1 $fileone.PE_FASTQ_R1'.fq';
            ln -sf $fileone.PE_FASTQ_R2 $fileone.PE_FASTQ_R2'.fq';
            $PE_R1.append(str($fileone.PE_FASTQ_R1)+'.fq')
            $PE_R2.append(str($fileone.PE_FASTQ_R2)+'.fq')
        #end for
		#set PE_R1=",".join(PE_R1)
        #set PE_R2=",".join(PE_R2)
		#if $paired.strand_specific.is_strand_specific == "strand_specific":
			/home/galaxy/miniconda3/envs/trinity/bin/Trinity --seqType fq --max_memory ${memory}G --CPU $thread 
			--SS_lib_type $paired.strand_specific.libType 
			--left $PE_R1 
			--right $PE_R2 
			--min_contig_length $transcript_length
			--no_version_check
			--output ${__tool_directory__}/$$/trinity
		#else:
			/home/galaxy/miniconda3/envs/trinity/bin/Trinity --seqType fq --max_memory ${memory}G --CPU $thread 
			--left $PE_R1 
			--right $PE_R2 
			--min_contig_length $transcript_length
			--no_version_check
			--output ${__tool_directory__}/$$/trinity
		#end if
	#else:
		#set $SE = list()
		#for $fileone in $paired.SE_fastqFiles:
			ln -sf $fileone.SE_FASTQ $fileone.SE_FASTQ'.fq';
			$SE.append(str($fileone.SE_FASTQ)+'.fq')
		#end for
		#set SE=",".join(SE)
		#if $single.strand_specific.is_strand_specific == "strand_specific":
			/home/galaxy/miniconda3/envs/trinity/bin/Trinity --seqType fq --max_memory ${memory}G --CPU $thread 
			--SS_lib_type $single.strand_specific.libType 
			--single $SE
			--min_contig_length $transcript_length 
			--no_version_check
			--output ${__tool_directory__}/$$/trinity
		#else:
			/home/galaxy/miniconda3/envs/trinity/bin/Trinity --seqType fq --max_memory ${memory}G --CPU $thread 
			--single $SE
			--min_contig_length $transcript_length
			--no_version_check
			--output ${__tool_directory__}/$$/trinity
		#end if
	#end if	
	&& mv ${__tool_directory__}/$$/trinity/Trinity.fasta $fastq0
	&& rm -rf ${__tool_directory__}/$$/
  ]]></command>
  <inputs>
    <conditional name="paired">
        <param name="is_paired" type="select" label="Single-end or paired-end reads?">
            <option value="single" > single-end</option>
            <option value="paired" selected="true">paired-end</option>
        </param>
		<when value="single">
			<conditional name="strand_specific">
        		<param name="is_strand_specific" type="select" label="Strand-specific reads?">
            		<option value="non_strand_specific" selected="true"> non-strand-specific</option>
            		<option value="strand_specific">strand-specific</option>
        		</param>
				<when value="strand_specific">
					<param name="libType" type="select" label="Strand Specific lib type">
            			<option value="F" selected="true"> F</option>
            			<option value="R">R</option>
        			</param>
				</when>
    		</conditional>
			<repeat name="SE_fastqFiles" title="FASTQ file" min="1" default="1">
        		<param name="SE_FASTQ" type="data" format="fastqsanger,fastqsanger.gz,fastq,fq"  multiple="false" label="Input the FASTQ file" help=""/>
    		</repeat>
		</when>
		<when value="paired">
			<conditional name="strand_specific">
        		<param name="is_strand_specific" type="select" label="Strand-specific reads?">
            		<option value="non_strand_specific" selected="true"> non-strand-specific</option>
            		<option value="strand_specific">strand-specific</option>
        		</param>
				<when value="strand_specific">
					<param name="libType" type="select" label="Strand Specific lib type">
            			<option value="FR" selected="true">FR</option>
            			<option value="RF">RF</option>
        			</param>
				</when>
    		</conditional>
			<repeat name="PE_fastqFiles" title="FASTQ file" min="1" default="1">
        		<param name="PE_FASTQ_R1" type="data" format="fastqsanger,fastqsanger.gz,fastq,fq"  multiple="false" label="Input the FASTQ file(R1)" help=""/>
				<param name="PE_FASTQ_R2" type="data" format="fastqsanger,fastqsanger.gz,fastq,fq"  multiple="false" label="Input the FASTQ file(R2)" help=""/>
			</repeat>
		</when>
    </conditional>
	<param name="transcript_length"   type="integer" value="200" label="Min contig length" help="The min contig length (default: 200)."/>
	<param name="thread" type="integer" value="1" min="1" max="16" label="Threads" help="The number of threads used for parallel computation."/>
	<param name="memory" type="integer" value="8" min="8" max="64" label="Max memory" help="max memory to use by Trinity(GB)"/>
  </inputs>
  <stdio>
	<exit_code range="1:"  level="fatal" description="Error Running combine collection to a file" />
  </stdio>
  <outputs> 
	<data name="fastq0" format="fasta" label="Assembly_transfrags(By_Trinity)">
	</data>
  </outputs>
  <help>
<![CDATA[
.. class:: infomark

**What it does**

In this function,  a novel method Trinity (Grabherr *et al*., 2011) for the efficient and robust *de novo* reconstruction of transcriptomes from RNA-seq data.Trinity partitions the sequence data into many individual de Bruijn graphs, each representing the transcriptional complexity at a given gene or locus, and then processes each graph independently to extract full-length splicing isoforms and to tease apart transcripts derived from paralogous genes. 

-----

.. class:: infomark

**Inputs**

- **Input FASTQ files:**  Input cleaned sequence reads in FASTQ format

-----

.. class:: infomark

**Parameters**

- **Min contig length:** The min contig length (default: 200)
- **Strand-specific information:** Strand-specific RNA-Seq read orientation.if paired: RF or FR,if single: F or R.   (dUTP method = RF)

-----

.. class:: infomark

**Outputs**

- **de novo transcriptome assembly in FASTA format**

]]>

  </help>
   <citations>
        <citation type="doi">10.1038/nbt.1883</citation>
    </citations>
</tool>